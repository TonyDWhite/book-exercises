paste(name, "'s birthday is in ", days, " days", sep = "")
}
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
birthdays_2019[names(birthdays_2019)])
print(bday_announcement)
#install.packages(stringr)
#################
#### PART 1 #####
#################
my_age <- 18
my_name <- "Tony"
#create introduction based on name and age params
make_introduction <- function(name, age) {
introduction <- paste("Hello, my name is", name,
"and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey,I'm", my_intro)
print(casual_intro)
capital_intro <- stringr::str_to_title(my_intro)
print(capital_intro)
intro_e_count <- stringr::str_count(my_intro, pattern = "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("1984", "The Moon and Sixpence", "Moby_Dick",
"The hitchhiker's guide to the galaxy", "A farewell to arms",
"Twenty Thousand Leagues Under the Sea")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read")
print(book_reviews)
#remove the object at the given index from the givene vector books
remove_book <- function(books, index) {
books <- books[-index]
}
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- c(1:201)
squared_numbers <- numbers^2
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squared_numbers[101]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
#################
#### PART 4 #####
#################
spring_break <- as.Date("2019-03-16")
#print(spring_break)
today <- Sys.Date()
days_to_break <- spring_break - today
print(days_to_break)
birthdays <- list(
myself = as.Date("2000-06-20"),
mother = as.Date("1973-03-03"),
father = as.Date("1973-09-06")
)
parent_bday <- format(birthdays$mother, "%m/%d")
#return the given date object's month and day, in 2019
in_2019 <- function(date) {
string <- format(date, "%m-%d")
string <- paste("2019-", string, sep = "")
date <- as.Date(string)
}
birthdays_2019 <- lapply(birthdays, in_2019)
print(birthdays_2019)
#return true if the day has passed this year, false otherwise
#today is considered not passed yet
date_has_passed <- function(date) {
in_2019(date) - in_2019(Sys.Date()) < 0
}
print(date_has_passed(as.Date("2019-01-23")))
#make a birthday anouncement on how many days there are
#till the given date; use next year's birthday if it's passed this year
make_birthday_announcement <- function(name, birthday) {
#birthday <- as.Date("2019-03-03")
#name <- "mother"
days <- birthday - Sys.Date()
if (date_has_passed(birthday)) {
month_day <- format(birthday, "%m-%d")
string <- paste("2020", "-", month_day, sep = "")
birthday <- as.Date(string)
days <- birthday - Sys.Date()
}
paste(name, "'s birthday is in ", days, " days", sep = "")
}
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
birthdays_2019[names(birthdays_2019)])
print(bday_announcement)
#install.packages(stringr)
#################
#### PART 1 #####
#################
my_age <- 18
my_name <- "Tony"
#create introduction based on name and age params
make_introduction <- function(name, age) {
introduction <- paste("Hello, my name is", name,
"and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey,I'm", my_intro)
print(casual_intro)
capital_intro <- stringr::str_to_title(my_intro)
print(capital_intro)
intro_e_count <- stringr::str_count(my_intro, pattern = "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("1984", "The Moon and Sixpence", "Moby_Dick",
"The hitchhiker's guide to the galaxy", "A farewell to arms",
"Twenty Thousand Leagues Under the Sea")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read")
print(book_reviews)
#remove the object at the given index from the givene vector books
remove_book <- function(books, index) {
books <- books[-index]
}
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- c(1:201)
squared_numbers <- numbers^2
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squared_numbers[101]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
#################
#### PART 4 #####
#################
spring_break <- as.Date("2019-03-16")
#print(spring_break)
today <- Sys.Date()
days_to_break <- spring_break - today
print(days_to_break)
birthdays <- list(
myself = as.Date("2000-06-20"),
mother = as.Date("1973-03-03"),
father = as.Date("1973-09-06")
)
parent_bday <- format(birthdays$mother, "%m/%d")
#return the given date object's month and day, in 2019
in_2019 <- function(date) {
string <- format(date, "%m-%d")
string <- paste("2019-", string, sep = "")
date <- as.Date(string)
}
birthdays_2019 <- lapply(birthdays, in_2019)
print(birthdays_2019)
#return true if the day has passed this year, false otherwise
#today is considered not passed yet
date_has_passed <- function(date) {
in_2019(date) - in_2019(Sys.Date()) < 0
}
print(date_has_passed(as.Date("2019-01-23")))
#make a birthday anouncement on how many days there are
#till the given date; use next year's birthday if it's passed this year
make_birthday_announcement <- function(name, birthday) {
#birthday <- as.Date("2019-03-03")
#name <- "mother"
days <- birthday - Sys.Date()
if (date_has_passed(birthday)) {
month_day <- format(birthday, "%m-%d")
string <- paste("2020", "-", month_day, sep = "")
birthday <- as.Date(string)
days <- birthday - Sys.Date()
}
paste(name, "'s birthday is in ", days, " days", sep = "")
}
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
birthdays_2019[names(birthdays_2019)])
print(bday_announcement)
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
birthdays_2019$names(birthdays_2019))
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
birthdays_2019$names(birthdays_2019))
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
birthdays_2019[names(birthdays_2019)]
)
print(bday_announcement)
print(bday_announcement)
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
#birthdays_2019[names(birthdays_2019)]
birthdays_2019[1:length(birthdays_2019)]
)
print(bday_announcement)
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
#birthdays_2019[names(birthdays_2019)]
birthdays_2019[1:length(birthdays_2019)]
)
print(bday_announcement)
install.packages(styler)
install.packages("styler")
https://api.github.com/search/repositories?q=dplyr&sort=forks
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
install.packages("httr")
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
# install.packages("httr")
library("httr")
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
# install.packages("httr")
install.packages("jsonlite")
library("jasonlite")
library("jsonlite")
https://api.github.com/search/repositories?q=dplyr&sort=forks
https://api.github.com/search/repositories?q=dplyr&sort=forks
response <- GET(url)
url <-
"https://api.github.com/search/repositories?q=dplyr&sort=forks"
response <- GET(url)
response
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
resource_uri <- paste0(base_uri, endpoint)
resource_uri <- paste0(base_uri, endpoint)
base_uri <- "https://api.github.com"
endpoint <- "/search/repositories"
resource_uri <- paste0(base_uri, endpoint)
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.gitbub.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science"
?GET()
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(base_uri, org_resource)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource))
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource)) %>%
print()
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource)) %>%
print()
library("dplyr")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource)) %>%
print()
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(base_uri, org_resource) %>%
print()
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(base_uri) %>%
print()
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(base_uri)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(base_uri)
library(tidyr)
library(dplyr)
library(ggplot2)
# Load the `data/avocado.csv` file into a variable `avocados`
# Make sure strings are *not* read in as factors
avocados <- read.csv("data/avocado.csv")
setwd("E:/University of Washington/Info 201/Repos/exercises/chapter-12-exercises/exercise-1")
# Load the `data/avocado.csv` file into a variable `avocados`
# Make sure strings are *not* read in as factors
avocados <- read.csv("data/avocado.csv")
# To tell R to treat the `Date` column as a date (not just a string)
# Redefine that column as a date using the `as.Date()` function
# (hint: use the `mutate` function)
avocados <- mutate(avocados, Date = as.Date(Date))
View(avocados)
colnames(avocados)[colnames(avocados) == "X4046"] = "small_haas"
colnames(avocados)[colnames(avocados) == "X4225"] = "large_haas"
colnames(avocados)[colnames(avocados) == "X4770"] = "xlarge_haas"
# The data only has sales for haas avocados. Create a new column `other_avos`
# that is the Total.Volume minus all haas avocados (small, large, xlarge)
avocados <- mutate(avocados, other_avos = Total.Volume - small_haas - large_haas - xlarge_haas)
# To perform analysis by avocado size, create a dataframe `by_size` that has
# only `Date`, `other_avos`, `small_haas`, `large_haas`, `xlarge_haas`
by_size <- select(avocados, Date, other_avos, small_haas, large_haas, xlarge_haas)
View(by_size)
# In order to visualize this data, it needs to be reshaped. The four columns
# `other_avos`, `small_haas`, `large_haas`, `xlarge_haas` need to be
# **gathered** together into a single column called `size`. The volume of sales
# (currently stored in each column) should be stored in a new column called
# `volume`. Create a new dataframe `size_gathered` by passing the `by_size`
# data frame to the `gather()` function. `size_gathered` will only have 3
# columns: `Date`, `size`, and `volume`.
size_gathered <- gather(
by_size,
key = size,
value = volume,
- Date
)
View(size_gathered)
# Using `size_gathered`, compute the average sales volume of each size
# (hint, first `group_by` size, then compute using `summarize`)
size_gathered %>%
group_by(size) %>%
summarize(average = mean(volume, na.rm = TRUE))
# This shape also facilitates the visualization of sales over time
# (how to write this code is covered in Chapter 16)
ggplot(size_gathered) +
geom_smooth(mapping = aes(x = Date, y = volume, col = size), se = F)
View(avocados)
# We can also investigate sales by avocado type (conventional, organic).
# Create a new data frame `by_type` by grouping the `avocados` dataframe by
# `Date` and `type`, and calculating the sum of the `Total.Volume` for that type
# in that week (resulting in a data frame with 2 rows per week).
by_type <- avocados %>%
group_by(type, Date) %>%
summarize(week_total = sum(Total.Volume))
View(size_gathered)
View(by_type)
# To make a (visual) comparison of conventional versus organic sales, you
# need to **spread** out the `type` column into two different columns. Create a
# new data frame `by_type_wide` by passing the `by_type` data frame to
# the `spread()` function!
by_type_wide <- by_type %>%
spread(
key = type,
value = week_total
)
View(by_type_wide)
# Now you can create a scatterplot comparing conventional to organic sales!
# (how to write this code is covered in Chapter 16)
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
setwd("~/")
setwd("E:/University of Washington/Info 201/Repos/exercises/chapter-14-exercises/exercise-1")
# Exercise 1: reading and querying a web API
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
# install.packages("httr")
# install.packages("jsonlite")
library("httr")
library("jsonlite")
library("dplyr")
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
# Extract the content of the response using the `content()` function, saving it
# in a variable.
response_content <- content(response, "text")
# Convert the content variable from a JSON string into a data frame.
response_content <- fromJSON(response_content)
response_content %>% is.list()
# How many (public) repositories does the organization have?
length(response_content)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "java", sort = "forks")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
search_respond <-
paste0(base_uri, search_endpoint) %>%
GET(query = query_params)
print(search_respond)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
search_respond <- search_respond %>%
content("text") %>%
fromJSON() %>%
as.data.frame()
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
# ??
# What are the full names of the top 5 repos in the search results?
View(search_respond)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
search_respond$total_count
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
search_respond$total_count$1
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
search_respond$total_count[$[1]
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
search_respond$total_count[1]
# What are the full names of the top 5 repos in the search results?
search_respond %>%
pull(items.full_name) [1:5]
# What are the full names of the top 5 repos in the search results?
search_respond %>%
select(items.full_name) [1:5]
search_respond %>%
select(items.full_name)
# What are the full names of the top 5 repos in the search results?
search_respond %>%
select(items.full_name)[1:5]
search_respond %>%
select(items.full_name)
search_respond %>%
pull(items.full_name)
# What are the full names of the top 5 repos in the search results?
search_respond %>%
pull(items.full_name)[1:5]
c(1,2,3,4)[1:3]
# What are the full names of the top 5 repos in the search results?
search_respond %>%
pull(items.full_name) %>%
is.vector()
# What are the full names of the top 5 repos in the search results?
search_respond %>%
pull(items.full_name)[1:5]
# What are the full names of the top 5 repos in the search results?
search_respond %>%
pull(items.full_name) %>% [1:5]
search_respond %>%
pull(items.full_name)
# What are the full names of the top 5 repos in the search results?
search_respond %>%
pull(items.full_name)[1:5]
search_respond %>%
pull(items.full_name)[1:5]
View(response)
View(query_params)
View(query_params)
View(response_content)
View(response_content)
View(response_content)
View(response_content)
View(response_content)
View(response_content)
View(response_content)
View(response_content)
# What are the full names of the top 5 repos in the search results?
search_respond %>%
pull(items.full_name)[1:5]
search_respond %>%
pull(items.full_name)
search_respond %>%
pull(items.full_name)
# What are the full names of the top 5 repos in the search results?
search_respond %>%
pull(items.full_name)(1:5  )
# What are the full names of the top 5 repos in the search results?
search_respond %>%
pull(items.full_name)[(1:5)]
# What are the full names of the top 5 repos in the search results?
search_respond %>%
pull(items.full_name)[1]
pull(search_respond , items.full_name)[1]
pull(search_respond, items.full_name)[1:5]
