#print(spring_break)
today <- Sys.Date()
days_to_break <- spring_break - today
print(days_to_break)
birthdays <- list(
myself = as.Date("2000-06-20"),
mother = as.Date("1973-03-03"),
father = as.Date("1973-09-06")
)
parent_bday <- format(birthdays$mother, "%m/%d")
#return the given date object's month and day, in 2019
in_2019 <- function(date) {
string <- format(date, "%m-%d")
string <- paste("2019-", string, sep = "")
date <- as.Date(string)
}
birthdays_2019 <- lapply(birthdays, in_2019)
print(birthdays_2019)
print(date_has_passed(as.Date("2019-01-23")))
#return true if the day has passed this year, false otherwise
#today is considered not passed yet
date_has_passed <- function(date) {
in_2019(date) - in_2019(Sys.Date()) < 0
}
#make a birthday anouncement on how many days there are
#till the given date; use next year's birthday if it's passed this year
make_birthday_announcement <- function(name, birthday) {
#birthday <- as.Date("2019-03-03")
#name <- "mother"
days <- birthday - Sys.Date()
if (date_has_passed(birthday)) {
month_day <- format(birthday, "%m-%d")
string <- paste("2020", "-", month_day, sep = "")
birthday <- as.Date(string)
days <- birthday - Sys.Date()
}
paste(name, "'s birthday is in ", days, " days", sep = "")
}
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
birthdays_2019[names(birthdays_2019)])
print(bday_announcement)
#install.packages(stringr)
#################
#### PART 1 #####
#################
my_age <- 18
my_name <- "Tony"
#create introduction based on name and age params
make_introduction <- function(name, age) {
introduction <- paste("Hello, my name is", name,
"and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey,I'm", my_intro)
print(casual_intro)
capital_intro <- stringr::str_to_title(my_intro)
print(capital_intro)
intro_e_count <- stringr::str_count(my_intro, pattern = "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("1984", "The Moon and Sixpence", "Moby_Dick",
"The hitchhiker's guide to the galaxy", "A farewell to arms",
"Twenty Thousand Leagues Under the Sea")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read")
print(book_reviews)
#remove the object at the given index from the givene vector books
remove_book <- function(books, index) {
books <- books[-index]
}
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- c(1:201)
squared_numbers <- numbers^2
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squared_numbers[101]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
#################
#### PART 4 #####
#################
spring_break <- as.Date("2019-03-16")
#print(spring_break)
today <- Sys.Date()
days_to_break <- spring_break - today
print(days_to_break)
birthdays <- list(
myself = as.Date("2000-06-20"),
mother = as.Date("1973-03-03"),
father = as.Date("1973-09-06")
)
parent_bday <- format(birthdays$mother, "%m/%d")
#return the given date object's month and day, in 2019
in_2019 <- function(date) {
string <- format(date, "%m-%d")
string <- paste("2019-", string, sep = "")
date <- as.Date(string)
}
birthdays_2019 <- lapply(birthdays, in_2019)
print(birthdays_2019)
#return true if the day has passed this year, false otherwise
#today is considered not passed yet
date_has_passed <- function(date) {
in_2019(date) - in_2019(Sys.Date()) < 0
}
print(date_has_passed(as.Date("2019-01-23")))
#make a birthday anouncement on how many days there are
#till the given date; use next year's birthday if it's passed this year
make_birthday_announcement <- function(name, birthday) {
#birthday <- as.Date("2019-03-03")
#name <- "mother"
days <- birthday - Sys.Date()
if (date_has_passed(birthday)) {
month_day <- format(birthday, "%m-%d")
string <- paste("2020", "-", month_day, sep = "")
birthday <- as.Date(string)
days <- birthday - Sys.Date()
}
paste(name, "'s birthday is in ", days, " days", sep = "")
}
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
birthdays_2019[names(birthdays_2019)])
print(bday_announcement)
#install.packages(stringr)
#################
#### PART 1 #####
#################
my_age <- 18
my_name <- "Tony"
#create introduction based on name and age params
make_introduction <- function(name, age) {
introduction <- paste("Hello, my name is", name,
"and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey,I'm", my_intro)
print(casual_intro)
capital_intro <- stringr::str_to_title(my_intro)
print(capital_intro)
intro_e_count <- stringr::str_count(my_intro, pattern = "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("1984", "The Moon and Sixpence", "Moby_Dick",
"The hitchhiker's guide to the galaxy", "A farewell to arms",
"Twenty Thousand Leagues Under the Sea")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read")
print(book_reviews)
#remove the object at the given index from the givene vector books
remove_book <- function(books, index) {
books <- books[-index]
}
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- c(1:201)
squared_numbers <- numbers^2
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squared_numbers[101]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
#################
#### PART 4 #####
#################
spring_break <- as.Date("2019-03-16")
#print(spring_break)
today <- Sys.Date()
days_to_break <- spring_break - today
print(days_to_break)
birthdays <- list(
myself = as.Date("2000-06-20"),
mother = as.Date("1973-03-03"),
father = as.Date("1973-09-06")
)
parent_bday <- format(birthdays$mother, "%m/%d")
#return the given date object's month and day, in 2019
in_2019 <- function(date) {
string <- format(date, "%m-%d")
string <- paste("2019-", string, sep = "")
date <- as.Date(string)
}
birthdays_2019 <- lapply(birthdays, in_2019)
print(birthdays_2019)
#return true if the day has passed this year, false otherwise
#today is considered not passed yet
date_has_passed <- function(date) {
in_2019(date) - in_2019(Sys.Date()) < 0
}
print(date_has_passed(as.Date("2019-01-23")))
#make a birthday anouncement on how many days there are
#till the given date; use next year's birthday if it's passed this year
make_birthday_announcement <- function(name, birthday) {
#birthday <- as.Date("2019-03-03")
#name <- "mother"
days <- birthday - Sys.Date()
if (date_has_passed(birthday)) {
month_day <- format(birthday, "%m-%d")
string <- paste("2020", "-", month_day, sep = "")
birthday <- as.Date(string)
days <- birthday - Sys.Date()
}
paste(name, "'s birthday is in ", days, " days", sep = "")
}
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
birthdays_2019[names(birthdays_2019)])
print(bday_announcement)
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
birthdays_2019$names(birthdays_2019))
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
birthdays_2019$names(birthdays_2019))
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
birthdays_2019[names(birthdays_2019)]
)
print(bday_announcement)
print(bday_announcement)
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
#birthdays_2019[names(birthdays_2019)]
birthdays_2019[1:length(birthdays_2019)]
)
print(bday_announcement)
#birthday announcement for each person's birthday in birthday_2019
bday_announcement <- mapply(make_birthday_announcement,
names(birthdays_2019),
#birthdays_2019[names(birthdays_2019)]
birthdays_2019[1:length(birthdays_2019)]
)
print(bday_announcement)
install.packages(styler)
install.packages("styler")
https://api.github.com/search/repositories?q=dplyr&sort=forks
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
install.packages("httr")
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
# install.packages("httr")
library("httr")
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
# install.packages("httr")
install.packages("jsonlite")
library("jasonlite")
library("jsonlite")
https://api.github.com/search/repositories?q=dplyr&sort=forks
https://api.github.com/search/repositories?q=dplyr&sort=forks
response <- GET(url)
url <-
"https://api.github.com/search/repositories?q=dplyr&sort=forks"
response <- GET(url)
response
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
resource_uri <- paste0(base_uri, endpoint)
resource_uri <- paste0(base_uri, endpoint)
base_uri <- "https://api.github.com"
endpoint <- "/search/repositories"
resource_uri <- paste0(base_uri, endpoint)
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.gitbub.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science"
?GET()
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(base_uri, org_resource)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource))
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource)) %>%
print()
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource)) %>%
print()
library("dplyr")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource)) %>%
print()
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(base_uri, org_resource) %>%
print()
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(base_uri) %>%
print()
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(base_uri)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(base_uri)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library("ggplot2")
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_bar()
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(maping = aes(x = cuts, y = price))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cuts, y = price))
diamonds %>%  View()
library("dplyr")
diamonds %>%  View()
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "stack")
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "fill")
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "dodge")
?boxplot(
?boxplot()
g +
boxplot(mappping = aes(x=  color, y = price))
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
g <- ggplot(data = diamonds)
g +
boxplot(mappping = aes(x= color, y = price))
g +
boxplot(mappping = aes(x = color, y = price))
g +
boxplot(x = color)
ggplot(data = diamonds) +
boxplot(x = color)
ggplot(data = diamonds) +
boxplot()
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price))+
scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(data = diamonds) +
geom_violin(mapping = aes(x = color, y = price))+
scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(data = diamonds) +
geom_violin(mapping = aes(x = color, y = price))#+
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds) +
geom_bin2d(mapping = aes(x = price, y = carat))
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds) +
geom_bin2d(mapping = aes(x = price, y = carat)) +
scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds) +
geom_bin2d(mapping = aes(x = price, y = carat)) +
scale_y_log10() +
scale_x_log10()
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity))
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(data = diamonds) +
geo_bar(mapping = aes())
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(data = diamonds) +
geom_bar(mapping = aes())
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = fill))
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut, color = cut))
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut, color = cut), width = 1) +
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut, color = cut), width = 1)
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
plot_1<- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut, color = cut), width = 1)
plot_1
# Draw the same chart, but with the coordinate system flipped
plot_1 +
coord_flip()
# Draw the same chart, but in a polar coordinate system. It's a Coxcomb chart!
plot_1 +
coord_polar(theta = "x")
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds) +
geom_point(mapping = aes(x = price, y = data, color = clarity))
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds) +
geom_point(mapping = aes(x = price, y = carat, color = clarity))
setwd("E:/University of Washington/Info 201/Repos/exercises/chapter-16-exercises/exercise-2")
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
ggplot(data = diamonds) +
geom_point(mapping = aes(x = price, y = carat, color = clarity)) %>%
ggsave(file = "my-plot.png")
?ggsave
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
ggplot(data = diamonds) +
geom_point(mapping = aes(x = price, y = carat, color = clarity)) %>%
ggsave(filename = "my-plot.png")
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
my_plot <- ggplot(data = diamonds) +
geom_point(mapping = aes(x = price, y = carat, color = clarity))
ggsave(filename = "my-plot.png", my_plot)
