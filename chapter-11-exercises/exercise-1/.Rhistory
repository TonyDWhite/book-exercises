flight_gain_lose = (arr_delay) - (dep_delay)
) %>%
arrange(
flight_gain_lose
)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(
flights,
flight_gain_lose = (arr_delay) - (dep_delay)
)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(
flights,
flight_gain_lose
)
View(flights)
View(flights)
# Make a histogram of the amount of time gained using the `hist()` function
?hist()
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$flight_gain_lose)
# Make a histogram of the amount of time gained using the `hist()` function
hist(pull(flights, flight_gain_lose))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(pull(flights, flight_gain_lose), na.rm = TRUE)
# Exercise 4: practicing with dplyr
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(dplyr)
# install.packages("nycflights13")
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
nrow(flights)
ncol(flights)
colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(
flights,
gain_in_air = (arr_delay) - (dep_delay)
)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(
flights,
gain_in_air
)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(
flights,
gain_in_air = (arr_delay) - (dep_delay)
) %>%
arrange(
gain_in_air
)
# Make a histogram of the amount of time gained using the `hist()` function
hist(pull(flights, gain_in_air))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(pull(flights, gain_in_air), na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
# On average, did flights to SeaTac gain or loose time?
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
View(flights)
View(flights)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights_to_SeaTac <- select(
filter(
flights,
dest == "SEA"
),
origin, dest, gain_in_air
)
View(flights_to_SeaTac)
View(flights_to_SeaTac)
# On average, did flights to SeaTac gain or loose time?
mean(pull(flights_to_SeaTac, gain_in_air), na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
mean(
)
filter(
flights_to_SeaTac, origin == "JFK"
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
select(
gain_in_air
) %>%
mean(
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
select(
gain_in_air
) %>%
as.vector(
) %>%
mean(
)
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
select(
gain_in_air
)
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
select(
gain_in_air
) %>%
as.vector(
)
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
select(
gain_in_air
) %>%
as.numeric(
)
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
select(
gain_in_air
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
pull(
gain_in_air
) %>%
mean(
)
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
pull(
gain_in_air
)
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
pull(
gain_in_air
) %>%
mean(
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
pull(
gain_in_air
) %>%
?mean(
)
?mean(
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
pull(
gain_in_air
) %>%
mean(
na.rm = TRUE
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
pull(gain_in_air) %>%
mean(na.rm = TRUE)
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
pull(gain_in_air) %>%
max(na.rm = TRUE)
filter(
flights_to_SeaTac, origin == "JFK"
) %>%
pull(gain_in_air) %>%
min(na.rm = TRUE)
library("nycflights13")
library("dplyr")
View(flights)
flights %>%
group_by(month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
ave_delay = mean(dep_delay, rm.na = TRUE)
)
View(dep_delay_by_month)
View(dep_delay_by_month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
ave_delay = mean(dep_delay)
)
View(dep_delay_by_month)
View(dep_delay_by_month)
?mean()
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_month_ave <- flights %>%
group_by(month) %>%
summarize(
ave_delay = mean(dep_delay, na.rm = TRUE)
)
View(dep_delay_month_ave)
View(dep_delay_month_ave)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_month_ave <- flights %>%
group_by(month) %>%
summarize(
ave_delay = mean(dep_delay, na.rm = TRUE)
)
View(dep_delay_month_ave)
View(dep_delay_month_ave)
# Which month had the greatest average departure delay?
dep_delay_month_ave %>% filter(
dep_delay_month_ave == mean(dep_delay_month_ave)
) %>% pull(month)
# Which month had the greatest average departure delay?
dep_delay_month_ave %>% filter(
dep_delay_month_ave == max(dep_delay_month_ave)
) %>% pull(month)
# Which month had the greatest average departure delay?
dep_delay_month_ave %>% filter(
dep_delay_month_ave == max(dep_delay_month_ave)
) %>% pull(month)
# Which month had the greatest average departure delay?
dep_delay_month_ave %>% filter(
dep_delay_month_ave == max(dep_delay_month_ave)
) %>% select(month)
dep_delay_month_ave %>% filter(
dep_delay_month_ave == max(dep_delay_month_ave)
)
dep_delay_month_ave == max(dep_delay_month_ave)
# Which month had the greatest average departure delay?
dep_delay_month_ave %>% filter(
ave_delay == max(ave_delay)
) %>% pull(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
?plot()
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_month_ave)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
dep_delay_by_dest <- flights %>%
group_by(dest) %>%
summarize(
ave_delay == mean(arr_delay, na.rm = TRUE )
) %>%
head()
flights %>%
group_by(dest)
flights %>%
group_by(dest) %>%
summarize(
ave_delay == mean(arr_delay, na.rm = TRUE )
)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
dep_delay_by_dest <- flights %>%
group_by(dest) %>%
summarize(
ave_delay == mean(arr_delay, na.rm = TRUE )
)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
dep_delay_by_dest <- flights %>%
group_by(dest) %>%
summarize(
ave_delay = mean(arr_delay, na.rm = TRUE )
)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
dep_delay_by_dest <- flights %>%
group_by(dest) %>%
summarize(
ave_delay = mean(arr_delay, na.rm = TRUE )
) %>%
head()
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
dep_delay_by_dest <- flights %>%
group_by(dest) %>%
summarize(
ave_delay = mean(arr_delay, na.rm = TRUE )
)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
head() %>%  flights %>%
group_by(dest) %>%
summarize(
ave_delay = mean(arr_delay, na.rm = TRUE )
)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
head(5) %>%  flights %>%
group_by(dest) %>%
summarize(
ave_delay = mean(arr_delay, na.rm = TRUE )
)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>%
group_by(dest) %>%
summarize(
ave_delay = mean(arr_delay, na.rm = TRUE )
) %>%
head()
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>%
group_by(dest) %>%
summarize(
ave_delay = mean(arr_delay, na.rm = TRUE )
) %>%
arrange(-ave_delay) %>%
head()
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_by(flights, dest) %>%
summarize(
ave_delay = mean(arr_delay, na.rm = TRUE )
) %>%
arrange(-ave_delay) %>%
head()
??flights
# Which city was flown to with the highest average speed?
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE)) %>%
filter(ave_speed == max(ave_speed)) %>%
pull(dest)
mutate(
flights,
speed = distance / air_time
)
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest)
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE))
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE)) %>%
filter(ave_speed == max(ave_speed))
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE))
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE)) %>%
filter(ave_speed == max(ave_speed))
?max()
# Which city was flown to with the highest average speed?
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE)) %>%
filter(ave_speed == pmax(ave_speed)) %>%
pull(dest)
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE)) %>%
filter(ave_speed == pmax(ave_speed))
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE)) %>%
filter(ave_speed == max(ave_speed))
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE))
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE)) %>%
arrenge(-ave_speed)
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE)) %>%
arrange(-ave_speed)
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE)) %>%
arrange(-ave_speed) %>%
filter(ave_speed == max(ave_speed))
# Which city was flown to with the highest average speed?
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE)) %>%
arrange(-ave_speed) %>%
filter(ave_speed == max(ave_speed, na.rm = TRUE)) %>%
pull(dest)
# Which city was flown to with the highest average speed?
mutate(
flights,
speed = distance / air_time
) %>% #add speed
group_by(dest) %>%
summarize(ave_speed = mean(speed, na.rm = TRUE)) %>%
filter(ave_speed == max(ave_speed, na.rm = TRUE)) %>%
pull(dest)
