# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
?nchar()
# Create a variable `my_name` that contains your name
my_name <- "Tony"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name, type = "chars")
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming!")
# Make the `now_doing` variable upper case
now_doing <- toupper(now_doing)
fav_2 <- 2
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 1
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2 / sqrt(201)
?sum()
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
ruond_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 2)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- round_1 + round_2
round_2 <- round(fav_2, 1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- round_1 + round_2
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- round_1 + round_2
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
ruond_sum <- round(raw_sum, 1)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(number) {
number <- number + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(number) {
number <- number + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric(feet, inches) {
meter <- (feet * 12 + inches) * 0.0254
}
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric(feet, inches) {
meter <- (feet * 12 + inches) * 0.0254
}
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric(feet, inches){
meter <- (feet * 12 + inches) * 0.0254
}
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches){
meter <- (feet * 12 + inches) * 0.0254
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6, 2)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6, 1)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6, 0)
